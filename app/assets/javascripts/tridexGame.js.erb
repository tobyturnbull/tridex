var game = new Phaser.Game(1257, 684, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload(){
  game.load.image('starfield', '<%= image_path "starfield2.png" %>')
  // game.load.image('sky', '<%= image_path "sky.png" %>');
  game.load.spritesheet('player', '<%= image_path "player.png" %>', 43, 39);
  game.load.image('bullet', '<%= image_path "bullet.png" %>', 25, 11);
  game.load.spritesheet('boss', '<%= image_path "khaled.png" %>', 93, 75);
  game.load.spritesheet('enemy', '<%= image_path "joelEnemy.png" %>', 146, 112);
  game.load.image('sprite', '<%= image_path "sprite.png" %>', 68, 219);
  game.load.image('start', '<%= image_path "startMessage" %>')
  game.load.image('over', '<%= image_path "overMessage" %>')
};

var starfield;
var background;
var player;
var bullets;
var cursors;
var fire;
var enemies;
var boss;
var nextShotAt;
var shotDelay;
var nextHitAt;
var hitDelay;
var score = 0;
var scoreText;
var playerHit;
var playerLives = 3;
var lives = 4;
var bossHealth = 10;
var bossExists = false;
var invincible = false;
var joel;
var enemyCreator;
var bosses;
var over;

function create(){

  starfield = game.add.tileSprite(0, 0, 1257, 684, 'starfield');
  var joel = game.add.sprite(game.canvas.width, (game.canvas.height / 2), 'boss');

  bullets = game.add.group();
  enemies = game.add.group();
  bosses = game.add.group();

  nextShotAt = 0;
  shotDelay = 300;

  nextHitAt = 0;
  hitDelay = 3000;

  game.physics.startSystem(Phaser.Physics.ARCADE);

  game.world.setBounds(0, 0, game.canvas.width, game.canvas.height);

  player = game.add.sprite(50, 50, 'player');
  boss = game.add.sprite(200, 200, 'boss');
  over = game.add.image(350, 200, 'over')
  start = game.add.image(350, 200, 'start');
  game.physics.enable(boss, Phaser.Physics.ARCADE);
  boss.body.velocity.setTo(700, 700);
  boss.body.collideWorldBounds = true;
  // playerLives = game.add.sprite(500, 500, 'player')

  cursors = game.input.keyboard.createCursorKeys();

  game.physics.arcade.enable(player);
  game.physics.arcade.enable(bullets);
  game.physics.arcade.enable(boss);
  game.physics.arcade.enable(enemies);
  game.physics.arcade.enable(bosses);

  boss.body.bounce.set(1.0);

  boss.body.gravity.set(0, 0);

  // bullets.outOfBoundsKill = true;

  game.camera.follow(player);

  player.body.collideWorldBounds = true;

  scoreText = game.add.text(550, 50, 'Score: 0', { fontSize: '32px', fill: 'white' });

  // livesText = game.add.text((game.canvas.width / 2), 50, 'Lives: 3', { fontSize: '32px', fill: 'white' });

  // game.background.fixedToCamera = true

  // game.camera.follow(player);

  // setInterval(enemyCreator, 30)
}

function update(){



  starfield.tilePosition.x += -9;

  // var playerHit = function(){
  //   if (player._exists && hitDelay < game.time.now){
  //     if (lives >= 1){
  //       lives = lives - 1;
  //       hitDelay = game.time.now + 3000;
  //       player.frame = 9;
  //     } else {
  //     player.kill();
  //     }};
  //   };


  var fire = function(){
    if (player._exists && shotDelay < game.time.now){
      var b = bullets.create(player.body.x, player.body.y, 'bullet');
      game.physics.arcade.enable(b);
      b.body.velocity.x = 450;
      shotDelay = game.time.now + 270;

    } else {
      return;
      //  console.log(bullets);

      //bullets.setAll('this.body.velocity.x', 300);
      // bullets.set(b, 'this.body.velocity.x', 300, true, true, 0, false);
      //bullets.body.velocity.x = 300;
    };
  };

  var enemyCreator = function(){
    if (player._exists){
      // console.log ('fired')
      var randomValue = game.rnd.integerInRange(0, game.canvas.height)
        // game.physics.arcade.enable(joel);
        // joel.body.velocity.x = -50;
        // game.physics.arcade.overlap(joel, bullets, bulletHitBoss, null, this);
        // bossExists = true;
        var e = enemies.create(game.canvas.width, randomValue, 'enemy');
        game.physics.arcade.enable(e, Phaser.Physics.ARCADE);
        e.body.velocity.x = -200;
        game.physics.arcade.overlap(e, bullets, bulletHitEnemy, null, this);
        game.physics.enable(boss, Phaser.Physics.ARCADE);
        e.body.velocity.setTo((Math.floor(Math.random() * 973) + 1), (Math.floor(Math.random() * 750) + 1));
        e.body.collideWorldBounds = true;
        e.body.bounce.set(1);
        e.body.gravity.set(0, 0);
      };
    };

  // var bossCreator = function(){
  //   var bossCreated = false;
  //   if (bossCreated === false) {
  //   var randomValue = game.rnd.integerInRange(0, game.canvas.height)
  //     var e = bosses.create(game.canvas.width, randomValue, 'boss');
  //     game.physics.arcade.enable(e, Phaser.Physics.ARCADE);
  //     e.body.velocity.x = -150;
  //     game.physics.arcade.overlap(e, bullets, bulletHitBoss, null, this);
  //     game.physics.enable(bosses, Phaser.Physics.ARCADE);
  //     e.body.velocity.setTo(700, 700);
  //     e.body.collideWorldBounds = true;
  //     e.body.bounce.set(1.1);
  //     e.body.gravity.set(0, 0)
  //     bossCreated = true;
  //   };
  // };

  game.time.events.start(Phaser.Timer.SECOND * 2, enemyCreator)

  // game.physics.arcade.overlap(boss, bullets, bulletHitBoss, null, this);
  game.physics.arcade.overlap(player, boss, playerHit, null, this);
  game.physics.arcade.overlap(enemies, bullets, bulletHitEnemy, null, this);
  game.physics.arcade.overlap(enemies, player, playerHit, null, this);

  player.body.velocity.x = 0;
  player.body.velocity.y = 0;

  if (cursors.up.isDown && cursors.left.isDown)
  {
    player.body.velocity.y = -300;
    player.body.velocity.x = -300;
    player.frame = 1;
  }
  else if (cursors.up.isDown && cursors.right.isDown)
  {
    player.body.velocity.y = -300;
    player.body.velocity.x = 300;
    player.frame = 7;
  }
  else if (cursors.down.isDown && cursors.left.isDown)
  {
    player.body.velocity.y = 300;
    player.body.velocity.x = -300;
    player.frame = 2;
  }
  else if (cursors.down.isDown && cursors.right.isDown)
  {
    player.body.velocity.y = 300;
    player.body.velocity.x = 300;
    player.frame = 8;
  }
  else if (cursors.left.isDown)
  {
    player.body.velocity.x = -300;
    player.frame = 0;
  }
  else if (cursors.right.isDown)
  {
    player.body.velocity.x = 300;
    player.frame = 6;
  }
  else if (cursors.up.isDown)
  {
    player.body.velocity.y = -200
    player.frame = 4;
    player.body.velocity.x = -50;
  }
  else if (cursors.down.isDown)
  {
    player.body.velocity.y = 200
    player.frame = 5;
    player.body.velocity.x = -50;
  }
  else
  {
    player.animations.stop();
    player.frame = 3;
    player.body.velocity.x = -50;

  }

  if (game.input.keyboard.isDown(Phaser.Keyboard.Z)) {
    fire();
  }

  if (game.input.keyboard.isDown(Phaser.Keyboard.X)) {
    // enemyCreator();
    if (start._exists){
    setInterval(enemyCreator, 8000);
  };
    // setInterval(bossCreator, 10000);
    start.kill();
    if(!player._exists){
    score += 0;
    enemies.destroy();
    player = game.add.sprite(50, 50, 'player');
    game.physics.arcade.enable(player);
    player.body.collideWorldBounds = true;
    setInterval(enemyCreator, 8000);

  };
    if (over._exists){
      over.kill();
    };
  };

  if (game.input.keyboard.isDown(Phaser.Keyboard.Q)) {
    // throttle = true;
  };

};

// console.log("Test")

// function bulletHitBoss (boss, bullet) {
//   if (bossHealth > 0) {
//     if (boss.frame === 0){
//       boss.frame = 1;
//     } else {
//       boss.frame = 0;
//     };
//   bossHealth = bossHealth - 1;
//   bullet.kill();
//     } else {
//       boss.frame = 2;
//       bullet.kill();
//       score += 5000;
//       // player.kill();
//       boss.kill();
//   };
// }

function playerHit () {
  if (!start._exists) {
  // if (playerLives === 1){
  player.kill();
  over = game.add.image(350, 200, 'over');
  // } else {
  //   playerLives = playerLives - 1;
  // }
  };
}

// setInterval(enemyCreator, 30)

function bulletHitEnemy (enemies, bullet) {
  console.log('hit', enemies.frame);
  bullet.kill();
  if (enemies.frame === 0){
    enemies.frame = 1;
    return;
  } else if (enemies.frame === 1) {
  enemies.kill();
  score += 1;
  scoreText.text = 'Score: ' + score;
  // livesText.text += ' Lives: ' + lives;

  return;


  }

// setInterval(enemyCreator, 30)

};